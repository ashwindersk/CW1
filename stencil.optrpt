Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(72,3) inlined into stencil.c(32,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(73,5) inlined into stencil.c(32,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(73,5) inlined into stencil.c(32,3)
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(74,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(75,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.464
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 15 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(73,5) inlined into stencil.c(32,3)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(74,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(75,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.444
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(73,5) inlined into stencil.c(32,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(80,3) inlined into stencil.c(32,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(81,5) inlined into stencil.c(32,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(82,7) inlined into stencil.c(32,3)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(83,9) inlined into stencil.c(32,3)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at stencil.c(83,9) inlined into stencil.c(32,3)
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(85,11) ]
            remark #15305: vectorization support: vector length 8
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 7 
            remark #15477: vector loop cost: 0.370 
            remark #15478: estimated potential speedup: 10.390 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(83,9) inlined into stencil.c(32,3)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(85,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(83,9) inlined into stencil.c(32,3)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(36,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(57,3) inlined into stencil.c(37,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(37,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(37,5)
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(61,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(62,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(63,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.397
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 5 
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 103 
         remark #15477: vector loop cost: 7.870 
         remark #15478: estimated potential speedup: 8.750 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(37,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at stencil.c(57,3) inlined into stencil.c(38,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(38,5)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(38,5)
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(61,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(62,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
         remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
         remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(63,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.397
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 5 
         remark #15450: unmasked unaligned unit stride loads: 5 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 103 
         remark #15477: vector loop cost: 7.870 
         remark #15478: estimated potential speedup: 8.750 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at stencil.c(58,5) inlined into stencil.c(38,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(110,5) inlined into stencil.c(48,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(109,3) inlined into stencil.c(48,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(109,3) inlined into stencil.c(48,3)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.708
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(108,18) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 6.550 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(109,3) inlined into stencil.c(48,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 6.833
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(108,18) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(109,3) inlined into stencil.c(48,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(117,3) inlined into stencil.c(48,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(119,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 119 and call:fputc(int, FILE *) line 119
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 119 and call:fputc(int, FILE *) line 119

   LOOP BEGIN at stencil.c(118,5) inlined into stencil.c(48,3)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(119,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: stencil(const int, const int, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(57,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(58,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(58,5)
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(59,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(59,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(60,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(60,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(61,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(61,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(62,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(62,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(63,7) ]
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(63,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.397
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 5 
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 103 
      remark #15477: vector loop cost: 7.870 
      remark #15478: estimated potential speedup: 8.750 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(58,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: output_image(const char *, const int, const int, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(110,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(109,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(109,3)
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.708
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(108,18) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 14 
      remark #15477: vector loop cost: 1.500 
      remark #15478: estimated potential speedup: 6.550 
      remark #15487: type converts: 1 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(109,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference image has aligned access   [ stencil.c(111,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 6.833
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ stencil.c(108,18) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(109,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(117,3)
   remark #15382: vectorization support: call to function fputc(int, FILE *) cannot be vectorized   [ stencil.c(119,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 119 and call:fputc(int, FILE *) line 119
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fputc(int, FILE *) line 119 and call:fputc(int, FILE *) line 119

   LOOP BEGIN at stencil.c(118,5)
      remark #15527: loop was not vectorized: function call to fputc(int, FILE *) cannot be vectorized   [ stencil.c(119,7) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: init_image(const int, const int, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at stencil.c(72,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(73,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at stencil.c(73,5)
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(74,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(75,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.464
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 15 
      remark #15477: vector loop cost: 1.750 
      remark #15478: estimated potential speedup: 6.450 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at stencil.c(73,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference image has unaligned access   [ stencil.c(74,7) ]
      remark #15388: vectorization support: reference tmp_image has aligned access   [ stencil.c(75,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.444
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at stencil.c(73,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at stencil.c(80,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at stencil.c(81,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at stencil.c(82,7)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at stencil.c(83,9)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at stencil.c(83,9)
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(85,11) ]
            remark #15305: vectorization support: vector length 8
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 1.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 7 
            remark #15477: vector loop cost: 0.370 
            remark #15478: estimated potential speedup: 10.390 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at stencil.c(83,9)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference image has aligned access   [ stencil.c(85,11) ]
            remark #15305: vectorization support: vector length 4
            remark #15309: vectorization support: normalized vectorization overhead 3.333
            remark #15301: REMAINDER LOOP WAS VECTORIZED
         LOOP END

         LOOP BEGIN at stencil.c(83,9)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
